/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package supermarket;
//Remember to add that

import java.io.*;
import javax.swing.*;
import javax.swing.table.*;
//
import java.util.*;
import java.lang.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.toedter.calendar.JDateChooser;
/**
 *
 * @author Group1
 */
public class Admin extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public Admin() {
        initComponents();

        String filePath = "table.txt";
        File file = new File(filePath);
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            Object[] tableLines = br.lines().toArray();
            for (Object tableLine : tableLines) {
                String line = tableLine.toString().trim();
                String[] dataRow = line.split("/");
                model.addRow(dataRow);
            }

        } catch (FileNotFoundException f) {
            JOptionPane.showMessageDialog(null, "Can not import Data from Txt File(889)");
        }
        //For Seller
        String fPath = "Seller.txt";
        File file2 = new File(fPath);
        try {
            BufferedReader br = new BufferedReader(new FileReader(file2));

            DefaultTableModel model = (DefaultTableModel) SellerTable.getModel();

            Object[] tableLines = br.lines().toArray();
            for (Object tableLine : tableLines) {
                String line = tableLine.toString().trim();
                String[] dataRow = line.split("/");
                model.addRow(dataRow);
            }

        } catch (FileNotFoundException f) {
            JOptionPane.showMessageDialog(null, "Can not import Data from Txt File(889)");
        }
        // For Clients
    String clientFilePath = "Clients.txt";
    File clientFile = new File(clientFilePath);
    try {
        BufferedReader br = new BufferedReader(new FileReader(clientFile));

        DefaultTableModel clientModel = (DefaultTableModel) ClientsTable.getModel();

        Object[] clientTableLines = br.lines().toArray();
        for (Object clientTableLine : clientTableLines) {
            String line = clientTableLine.toString().trim();
            String[] dataRow = line.split("/");
            clientModel.addRow(dataRow);
        }

    } catch (FileNotFoundException f) {
        JOptionPane.showMessageDialog(null, "Can not import Data from Txt File(889)");
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Product = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Name = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DELETE = new javax.swing.JButton();
        CLEAR = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        EDIT = new javax.swing.JButton();
        ADD = new javax.swing.JButton();
        Qty = new javax.swing.JTextField();
        Price = new javax.swing.JTextField();
        Cat = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        Log1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        SID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        SName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        SPassword = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        SGender = new javax.swing.JComboBox<>();
        SellerAdd = new javax.swing.JButton();
        SellerUpdate = new javax.swing.JButton();
        SellerDelete = new javax.swing.JButton();
        SellerClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        SellerTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        Log = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        SDateofbirth = new com.toedter.calendar.JDateChooser();
        jLabel40 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        STelephone = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        No = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        CName = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        CPassword = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        CGender = new javax.swing.JComboBox<>();
        ClientsAdd = new javax.swing.JButton();
        ClientsUpdate = new javax.swing.JButton();
        ClientsDelete = new javax.swing.JButton();
        ClientsClear = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        ClientsTable = new javax.swing.JTable();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        Log3 = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        CDateofbirth = new com.toedter.calendar.JDateChooser();
        jLabel39 = new javax.swing.JLabel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 102, 153));
        jLabel3.setText("MANAGE PRODUCTS");

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 153));
        jLabel2.setText("PRODUCT ID");

        Product.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Product.setForeground(new java.awt.Color(0, 0, 255));

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 153));
        jLabel4.setText("NAME");

        Name.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Name.setForeground(new java.awt.Color(0, 0, 255));

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 153));
        jLabel5.setText("QUANTITY");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 153));
        jLabel6.setText("PRICE");

        DELETE.setBackground(new java.awt.Color(0, 102, 204));
        DELETE.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        DELETE.setForeground(new java.awt.Color(255, 255, 255));
        DELETE.setText("Delete");
        DELETE.setBorder(null);
        DELETE.setBorderPainted(false);
        DELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEActionPerformed(evt);
            }
        });

        CLEAR.setBackground(new java.awt.Color(0, 102, 204));
        CLEAR.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        CLEAR.setForeground(new java.awt.Color(255, 255, 255));
        CLEAR.setText("Clear");
        CLEAR.setBorder(null);
        CLEAR.setBorderPainted(false);
        CLEAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLEARActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Price", "Quantity", "Category"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 102, 153));
        jLabel8.setText("PRODUCTS LIST");

        EDIT.setBackground(new java.awt.Color(0, 102, 204));
        EDIT.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        EDIT.setForeground(new java.awt.Color(255, 255, 255));
        EDIT.setText("Update");
        EDIT.setBorder(null);
        EDIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDITActionPerformed(evt);
            }
        });

        ADD.setBackground(new java.awt.Color(0, 102, 204));
        ADD.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        ADD.setForeground(new java.awt.Color(255, 255, 255));
        ADD.setText("Add");
        ADD.setBorder(null);
        ADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDActionPerformed(evt);
            }
        });

        Qty.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Qty.setForeground(new java.awt.Color(0, 0, 255));
        Qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                QtyKeyTyped(evt);
            }
        });

        Price.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Price.setForeground(new java.awt.Color(0, 0, 255));
        Price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PriceKeyTyped(evt);
            }
        });

        Cat.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Cat.setForeground(new java.awt.Color(0, 0, 255));
        Cat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CatKeyTyped(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 102, 153));
        jLabel19.setText("CATEGORY");

        Log1.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N
        Log1.setText("Logout");
        Log1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Log1ActionPerformed(evt);
            }
        });
        Log1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Log1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Product, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel19))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(Qty)
                                        .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Cat, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(EDIT, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(jLabel8))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(283, 283, 283)
                        .addComponent(jLabel3)))
                .addGap(56, 56, 56)
                .addComponent(Log1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 55, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 756, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addComponent(Log1))
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Qty, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Price, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Product, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EDIT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ADD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CLEAR, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Products", jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 153));
        jLabel9.setText("MANAGE SELLERS");

        jLabel10.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 102, 153));
        jLabel10.setText("SELLER ID");

        SID.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SID.setForeground(new java.awt.Color(0, 0, 255));

        jLabel11.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 102, 153));
        jLabel11.setText("NAME");

        SName.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SName.setForeground(new java.awt.Color(0, 0, 255));

        jLabel12.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 102, 153));
        jLabel12.setText("PASSWORD");

        SPassword.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SPassword.setForeground(new java.awt.Color(0, 0, 255));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 102, 153));
        jLabel13.setText("GENDER");

        SGender.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        SGender.setForeground(new java.awt.Color(0, 102, 153));
        SGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"", "Male", "Female" }));

        SellerAdd.setBackground(new java.awt.Color(0, 102, 204));
        SellerAdd.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        SellerAdd.setForeground(new java.awt.Color(255, 255, 255));
        SellerAdd.setText("Add");
        SellerAdd.setBorder(null);
        SellerAdd.setBorderPainted(false);
        SellerAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerAddActionPerformed(evt);
            }
        });

        SellerUpdate.setBackground(new java.awt.Color(0, 102, 204));
        SellerUpdate.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        SellerUpdate.setForeground(new java.awt.Color(255, 255, 255));
        SellerUpdate.setText("Update");
        SellerUpdate.setBorder(null);
        SellerUpdate.setBorderPainted(false);
        SellerUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerUpdateActionPerformed(evt);
            }
        });

        SellerDelete.setBackground(new java.awt.Color(0, 102, 204));
        SellerDelete.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        SellerDelete.setForeground(new java.awt.Color(255, 255, 255));
        SellerDelete.setText("Delete");
        SellerDelete.setBorder(null);
        SellerDelete.setBorderPainted(false);
        SellerDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerDeleteActionPerformed(evt);
            }
        });

        SellerClear.setBackground(new java.awt.Color(0, 102, 204));
        SellerClear.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        SellerClear.setForeground(new java.awt.Color(255, 255, 255));
        SellerClear.setText("Clear");
        SellerClear.setBorder(null);
        SellerClear.setBorderPainted(false);
        SellerClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SellerClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SellerClearActionPerformed(evt);
            }
        });

        SellerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seller ID", "PASSWORD", "NAME", "GENDER", "Date of Birth", "Telephone No."
            }
        ));
        SellerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SellerTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(SellerTable);

        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 102, 153));
        jLabel14.setText("SELLERS LIST");

        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("*");

        jLabel15.setForeground(new java.awt.Color(204, 0, 0));
        jLabel15.setText("*");

        jLabel16.setForeground(new java.awt.Color(204, 0, 0));
        jLabel16.setText("*");

        jLabel17.setForeground(new java.awt.Color(204, 0, 0));
        jLabel17.setText("*");

        jLabel18.setForeground(new java.awt.Color(204, 0, 0));
        jLabel18.setText("*Required Fields");

        Log.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N
        Log.setText("Logout");
        Log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 102, 153));
        jLabel20.setText("Dateofbirth");

        jLabel40.setForeground(new java.awt.Color(204, 0, 0));
        jLabel40.setText("*");

        jLabel21.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 102, 153));
        jLabel21.setText("Telephone No.");

        jLabel41.setForeground(new java.awt.Color(204, 0, 0));
        jLabel41.setText("*");

        STelephone.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        STelephone.setForeground(new java.awt.Color(0, 0, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(SellerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(117, 117, 117)
                                        .addComponent(jLabel14))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(SellerUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(56, 56, 56)
                                        .addComponent(SellerDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addComponent(jLabel10)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                            .addComponent(jLabel11)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel15)
                                            .addGap(29, 29, 29)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel40)))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(SDateofbirth, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(SID, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(124, 124, 124)
                                                .addComponent(jLabel16))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGap(49, 49, 49)
                                                .addComponent(jLabel21)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel41))))
                                    .addComponent(SName, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(jLabel18))
                            .addComponent(SPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SGender, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(SellerClear, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(STelephone, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(264, 264, 264)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17)
                                        .addGap(4, 4, 4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Log))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(jLabel12)
                                .addGap(0, 0, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {SGender, SID, SPassword});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Log)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel10)
                                    .addComponent(SID, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jLabel1)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel11))
                            .addComponent(jLabel15)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel9)
                        .addGap(46, 46, 46)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13)
                                .addComponent(SName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(17, 17, 17)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel41)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel18)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(STelephone, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(24, 24, 24)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SDateofbirth, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SellerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SellerUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SellerDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SellerClear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {SGender, SID, SName});

        jTabbedPane1.addTab("Manage Sellers", jPanel3);

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jLabel27.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(0, 102, 153));
        jLabel27.setText("MANAGE Clients");

        jLabel28.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 102, 153));
        jLabel28.setText("Client No.");

        No.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        No.setForeground(new java.awt.Color(0, 0, 255));

        jLabel29.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 102, 153));
        jLabel29.setText("NAME");

        CName.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        CName.setForeground(new java.awt.Color(0, 0, 255));

        jLabel30.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 102, 153));
        jLabel30.setText("PASSWORD");

        CPassword.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        CPassword.setForeground(new java.awt.Color(0, 0, 255));

        jLabel31.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 102, 153));
        jLabel31.setText("GENDER");

        CGender.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        CGender.setForeground(new java.awt.Color(0, 102, 153));
        CGender.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"", "Male", "Female" }));

        ClientsAdd.setBackground(new java.awt.Color(0, 102, 204));
        ClientsAdd.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        ClientsAdd.setForeground(new java.awt.Color(255, 255, 255));
        ClientsAdd.setText("Add");
        ClientsAdd.setBorder(null);
        ClientsAdd.setBorderPainted(false);
        ClientsAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ClientsAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsAddActionPerformed(evt);
            }
        });

        ClientsUpdate.setBackground(new java.awt.Color(0, 102, 204));
        ClientsUpdate.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        ClientsUpdate.setForeground(new java.awt.Color(255, 255, 255));
        ClientsUpdate.setText("Update");
        ClientsUpdate.setBorder(null);
        ClientsUpdate.setBorderPainted(false);
        ClientsUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ClientsUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsUpdateActionPerformed(evt);
            }
        });

        ClientsDelete.setBackground(new java.awt.Color(0, 102, 204));
        ClientsDelete.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        ClientsDelete.setForeground(new java.awt.Color(255, 255, 255));
        ClientsDelete.setText("Delete");
        ClientsDelete.setBorder(null);
        ClientsDelete.setBorderPainted(false);
        ClientsDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ClientsDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsDeleteActionPerformed(evt);
            }
        });

        ClientsClear.setBackground(new java.awt.Color(0, 102, 204));
        ClientsClear.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        ClientsClear.setForeground(new java.awt.Color(255, 255, 255));
        ClientsClear.setText("Clear");
        ClientsClear.setBorder(null);
        ClientsClear.setBorderPainted(false);
        ClientsClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ClientsClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientsClearActionPerformed(evt);
            }
        });

        ClientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Client No.", "PASSWORD", "NAME", "GENDER", "Date of Birth"
            }
        ));
        ClientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClientsTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(ClientsTable);

        jLabel32.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(0, 102, 153));
        jLabel32.setText("Clients LIST");

        jLabel33.setForeground(new java.awt.Color(204, 0, 0));
        jLabel33.setText("*");

        jLabel34.setForeground(new java.awt.Color(204, 0, 0));
        jLabel34.setText("*");

        jLabel35.setForeground(new java.awt.Color(204, 0, 0));
        jLabel35.setText("*");

        jLabel36.setForeground(new java.awt.Color(204, 0, 0));
        jLabel36.setText("*");

        jLabel37.setForeground(new java.awt.Color(204, 0, 0));
        jLabel37.setText("*Required Fields");

        Log3.setFont(new java.awt.Font("Century Gothic", 2, 14)); // NOI18N
        Log3.setText("Logout");
        Log3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Log3ActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(0, 102, 153));
        jLabel38.setText("Dateofbirth");

        jLabel39.setForeground(new java.awt.Color(204, 0, 0));
        jLabel39.setText("*");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(410, Short.MAX_VALUE)
                .addComponent(jLabel32)
                .addGap(335, 335, 335))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel28)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel33))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                    .addComponent(jLabel29)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel34)
                                    .addGap(29, 29, 29)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel39)))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(No, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(CDateofbirth, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(CName, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel37)
                                .addGap(33, 33, 33))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel35)
                                .addGap(18, 18, 18)
                                .addComponent(CPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(460, 460, 460)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CGender, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel27)
                                .addGap(259, 259, 259)
                                .addComponent(Log3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(ClientsAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(ClientsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(ClientsDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(ClientsClear, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(200, 200, 200))))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jLabel35)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel31)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel36)
                                .addGap(0, 30, Short.MAX_VALUE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Log3)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel27)))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel28)
                                    .addComponent(No, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30)
                                    .addComponent(CPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jLabel33)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel29))
                            .addComponent(jLabel34)
                            .addComponent(CGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ClientsClear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClientsDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClientsUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClientsAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel32)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jLabel38))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel39)
                                    .addComponent(CDateofbirth, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Manage Clients", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1003, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogActionPerformed
        // TODO add your handling code here:
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_LogActionPerformed

    private void SellerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SellerTableMouseClicked
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel model = (DefaultTableModel) SellerTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = SDateofbirth.getDate();

        seller.setId(model.getValueAt(SellerTable.getSelectedRow(), 0).toString());
        seller.setSPassword(model.getValueAt(SellerTable.getSelectedRow(), 1).toString());
        seller.setName(model.getValueAt(SellerTable.getSelectedRow(), 2).toString());
        seller.setSGender(model.getValueAt(SellerTable.getSelectedRow(), 3).toString());
        String dateOfBirthStr = (model.getValueAt(SellerTable.getSelectedRow(), 4).toString());
        seller.setSTelephone(model.getValueAt(SellerTable.getSelectedRow(), 5).toString());

        try {
            Date dateOfBirth = dateFormat.parse(dateOfBirthStr);
            seller.setSDateofbirth(dateFormat.format(dateOfBirth));
            SDateofbirth.setDate(dateOfBirth);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        SID.setText(seller.getId());
        SPassword.setText(seller.getSPassword());
        SName.setText(seller.getName());
        SGender.setSelectedItem(seller.getSGender());
        STelephone.setText(seller.getSTelephone());
        SID.setEditable(false);
    }//GEN-LAST:event_SellerTableMouseClicked

    private void SellerClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerClearActionPerformed
        // TODO add your handling code here:
        SID.setText("");
        SName.setText("");
        SPassword.setText("");
        SGender.setSelectedItem("");
        SDateofbirth.setDate(null);
        STelephone.setText("");
        SID.setEditable(true);
    }//GEN-LAST:event_SellerClearActionPerformed

    private void SellerDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerDeleteActionPerformed
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel DeleteModel = (DefaultTableModel) SellerTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = SDateofbirth.getDate();

        seller.setId(SID.getText());
        seller.setSPassword(SPassword.getText());
        seller.setName(SName.getText());
        seller.setSGender(SGender.getSelectedItem().toString());
        seller.setSDateofbirth(dateFormat.format(selectedDate));
        seller.setSTelephone(STelephone.getText());

        if (SellerTable.getSelectedRowCount() == 1) {
            DeleteModel.removeRow(SellerTable.getSelectedRow());
            SellingDeleteMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender(), seller.getSDateofbirth() , seller.getSTelephone() );
            JOptionPane.showMessageDialog(this, "Record Successfully Deleted");
        } else if (SellerTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Table is Empty");
        } else if (SellerTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No Row is Selected");
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Single Row to Update");
        }

        SID.setText("");
        SPassword.setText("");
        SName.setText("");
        SGender.setSelectedItem("");
        SDateofbirth.setDate(null);
        SID.setEditable(true);
        STelephone.setText("");
        
    }//GEN-LAST:event_SellerDeleteActionPerformed

    private void SellerUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerUpdateActionPerformed
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel EditModel = (DefaultTableModel) SellerTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = SDateofbirth.getDate();

        seller.setId(SID.getText());
        seller.setSPassword(SPassword.getText());
        seller.setName(SName.getText());
        seller.setSGender(SGender.getSelectedItem().toString());
        seller.setSDateofbirth(dateFormat.format(selectedDate));
        seller.setSTelephone(STelephone.getText());
        if (SellerTable.getSelectedRowCount() == 1) {
            while (SID.getText().equals("") || SName.getText().equals("") || SPassword.getText().equals("") || SGender.getSelectedItem().toString().equals("")|| selectedDate == null|| STelephone.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill in the required fields");
                return;
            }

            EditModel.setValueAt(seller.getId(), SellerTable.getSelectedRow(), 0);
            EditModel.setValueAt(seller.getSPassword().toString(), SellerTable.getSelectedRow(), 1);
            EditModel.setValueAt(seller.getName(), SellerTable.getSelectedRow(), 2);
            EditModel.setValueAt(seller.getSGender(), SellerTable.getSelectedRow(), 3);
            EditModel.setValueAt(seller.getSDateofbirth(), SellerTable.getSelectedRow(), 4);
            EditModel.setValueAt(seller.getSTelephone(), SellerTable.getSelectedRow(), 5);

            //updating in txt file
            SellingEDeleteMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender(), seller.getSDateofbirth(), seller.getSTelephone());
            SellingAddMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender(), seller.getSDateofbirth(), seller.getSTelephone());

            JOptionPane.showMessageDialog(this, "Record Updated Successfully");
        } else {
            if (SellerTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Table is Empty");
            } else if (SellerTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No Row is Selected");
            } else {
                JOptionPane.showMessageDialog(null, "Please Select a Single Row to Update");
            }
        }

        SID.setText("");
        SPassword.setText("");
        SName.setText("");
        SGender.setSelectedItem("");
        SDateofbirth.setDate(null);
        STelephone.setText("");
        SID.setEditable(true);
    }//GEN-LAST:event_SellerUpdateActionPerformed

    private void SellerAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SellerAddActionPerformed
        // TODO add your handling code here:
        SellerManager seller = new SellerManager();
        DefaultTableModel AddModel = (DefaultTableModel) SellerTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = SDateofbirth.getDate();

        while (SID.getText().equals("") || SPassword.getText().equals("") || SName.getText().equals("") || SGender.getSelectedItem().toString().equals("")|| selectedDate == null|| STelephone.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill in the required fields");
            return;
        }
        String Id;
        for (int i = 0; i < SellerTable.getRowCount(); i++) {
            Id = AddModel.getValueAt(i, 0).toString().trim();
            if (SID.getText().equals(Id)) {
                JOptionPane.showMessageDialog(null, "Seller ID should be Unique");
                return;
            }
        }

        seller.setId(SID.getText());
        seller.setSPassword(SPassword.getText());
        seller.setName(SName.getText());
        seller.setSGender(SGender.getSelectedItem().toString());
        seller.setSDateofbirth(dateFormat.format(selectedDate));
        seller.setSTelephone(STelephone.getText());
        // In txt File

        SellingAddMethod(seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender(),seller.getSDateofbirth(), seller.getSTelephone());

        Object[] row = {seller.getId(), seller.getSPassword(), seller.getName(), seller.getSGender(),seller.getSDateofbirth(), seller.getSTelephone()};
        AddModel.addRow(row);

        JOptionPane.showMessageDialog(this, "Data Successfully Added");

        SID.setText("");
        SPassword.setText("");
        SName.setText("");
        SGender.setSelectedItem("");
        SDateofbirth.setDate(null);
        STelephone.setText("");
    }//GEN-LAST:event_SellerAddActionPerformed

    private void Log1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Log1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_Log1KeyPressed

    private void Log1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Log1ActionPerformed
        // TODO add your handling code here:
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_Log1ActionPerformed

    private void CatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CatKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_CatKeyTyped

    private void PriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PriceKeyTyped

    }//GEN-LAST:event_PriceKeyTyped

    private void QtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_QtyKeyTyped

    }//GEN-LAST:event_QtyKeyTyped

    private void ADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDActionPerformed
        // TODO add your handling code here:

        ProductManager s1 = new ProductManager();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        while (Product.getText().equals("") || Name.getText().equals("") || Price.getText().equals("") || Qty.getText().toString().equals("") || Cat.getText().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill in the required fields");
            return;
        }
        try {
            int Quantity = Integer.parseInt(Qty.getText());
            int Pr = Integer.parseInt(Price.getText());
            if (Quantity <= 0 || Pr <= 0) {
                JOptionPane.showMessageDialog(this, "Enter only positive integer value");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter Only integer value");
            return;
        }

        String Id;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            Id = model.getValueAt(i, 0).toString().trim();
            if (Product.getText().equals(Id)) {
                JOptionPane.showMessageDialog(null, "Product ID should be Unique");
                return;
            }
        }

        s1.setId(Product.getText().trim());
        s1.setName(Name.getText().trim());
        s1.setPrice(Price.getText().trim());
        s1.setQty(Qty.getText().trim());
        s1.setCat(Cat.getText().trim());

        //Addding data to Txt File
        ProductAddMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
        //Adding Data to Jtable
        model.addRow(new Object[]{s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat()});
        JOptionPane.showMessageDialog(this, "Data Successfully Added.");

        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
    }//GEN-LAST:event_ADDActionPerformed

    private void EDITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDITActionPerformed
        // TODO add your handling code here:

        ProductManager s1 = new ProductManager();

        s1.setId(Product.getText().trim());
        s1.setName(Name.getText().trim());
        s1.setPrice(Price.getText().trim());
        s1.setQty(Qty.getText().trim());
        s1.setCat(Cat.getText().trim());
        //Addding the edited data and deleting the privious data from Txt File
        try {
            int Quantity = Integer.parseInt(Qty.getText());
            int Pr = Integer.parseInt(Price.getText());
            if (Quantity <= 0 || Pr <= 0) {
                JOptionPane.showMessageDialog(this, "Enter only positive integer value");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Enter Only integer value");
            return;
        }

        ProductEDeleteMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
        ProductAddMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        if (jTable1.getSelectedRowCount() == 1) {
            //if single row is selected than update

            while (Product.getText().equals("") || Name.getText().equals("") || Price.getText().equals("") || Qty.getText().toString().equals("") || Cat.getText().toString().equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill in the required fields");
                return;
            }

            String prod = Product.getText();
            String nam = Name.getText();
            String price = Price.getText();
            String qty = Qty.getText();
            String cat = Cat.getText();
            //set update value
            model.setValueAt(prod, jTable1.getSelectedRow(), 0);
            model.setValueAt(nam, jTable1.getSelectedRow(), 1);
            model.setValueAt(price, jTable1.getSelectedRow(), 2);
            model.setValueAt(qty, jTable1.getSelectedRow(), 3);
            model.setValueAt(cat, jTable1.getSelectedRow(), 4);
            //Update message display
            JOptionPane.showMessageDialog(this, "Update Successfully..");
        } else {
            if (jTable1.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Table is Empty..");
            } else {
                //if row is not selected or multiple rows are selected
                JOptionPane.showMessageDialog(this, "Please Select Single Row to Update..");
            }

        }
        //editing from the file

        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
        Product.setEditable(true);
    }//GEN-LAST:event_EDITActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        //Set Data to their Text Field
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //set data to text field when row is selected
        String product = model.getValueAt(jTable1.getSelectedRow(), 0).toString();
        String name = model.getValueAt(jTable1.getSelectedRow(), 1).toString();
        String price = model.getValueAt(jTable1.getSelectedRow(), 2).toString();
        String qty = model.getValueAt(jTable1.getSelectedRow(), 3).toString();
        String cat = model.getValueAt(jTable1.getSelectedRow(), 4).toString();

        //set to textfield
        Product.setText(product);
        Name.setText(name);
        Price.setText(price);
        Qty.setText(qty);
        Cat.setText(cat);

        Product.setEditable(false);
    }//GEN-LAST:event_jTable1MouseClicked

    private void CLEARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLEARActionPerformed
        // TODO add your handling code here:
        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
        Product.setEditable(true);
    }//GEN-LAST:event_CLEARActionPerformed

    private void DELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEActionPerformed
        // TODO add your handling code here:
        //Gettting jtable Model
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        ProductManager s1 = new ProductManager();
        s1.setId(Product.getText().trim());
        s1.setName(Name.getText().trim());
        s1.setPrice(Price.getText().trim());
        s1.setQty(Qty.getText().trim());
        s1.setCat(Cat.getText().trim());
        //Deleting the text from the file

        ProductDeleteMethod(s1.getId(), s1.getName(), s1.getPrice(), s1.getQty(), s1.getCat());
        //deleting row from the display GUI table
        if (jTable1.getSelectedRowCount() == 1) {
            //if row is selected than delete
            model.removeRow(jTable1.getSelectedRow());
        } else if (jTable1.getRowCount() == 0) {
            //if table is empty (no Data) than display message
            JOptionPane.showMessageDialog(this, "Table is Empty..");
        } else {
            //if table is not empty but row is not selected or multiply rows are selected
            JOptionPane.showMessageDialog(this, "Table is Empty or Muliple Rows are selected");

        }
        Product.setText("");
        Name.setText("");
        Price.setText("");
        Qty.setText("");
        Cat.setText("");
        Product.setEditable(true);
    }//GEN-LAST:event_DELETEActionPerformed

    private void ClientsAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsAddActionPerformed
        // TODO add your handling code here:
        ClientsManager Clients = new ClientsManager();
        DefaultTableModel AddModel = (DefaultTableModel) ClientsTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = CDateofbirth.getDate();

        while (No.getText().equals("") || CPassword.getText().equals("") || CName.getText().equals("") || CGender.getSelectedItem().toString().equals("")|| selectedDate == null) {
            JOptionPane.showMessageDialog(null, "Please fill in the required fields");
            return;
        }
        String Id;
        for (int i = 0; i < ClientsTable.getRowCount(); i++) {
            Id = AddModel.getValueAt(i, 0).toString().trim();
            if (No.getText().equals(Id)) {
                JOptionPane.showMessageDialog(null, "Seller ID should be Unique");
                return;
            }
        }

        Clients.setNo(No.getText());
        Clients.setCPassword(CPassword.getText());
        Clients.setName(CName.getText());
        Clients.setCGender(CGender.getSelectedItem().toString());
        Clients.setCDateofbirth(dateFormat.format(selectedDate));
        // In txt File

        BuyingAddMethod(Clients.getNo(), Clients.getCPassword(), Clients.getName(), Clients.getCGender(),Clients.getCDateofbirth());

        Object[] row = {Clients.getNo(), Clients.getCPassword(), Clients.getName(), Clients.getCGender(),Clients.getCDateofbirth()};
        AddModel.addRow(row);

        JOptionPane.showMessageDialog(this, "Data Successfully Added");

        No.setText("");
        CPassword.setText("");
        CName.setText("");
        CGender.setSelectedItem("");
        CDateofbirth.setDate(null);
    }//GEN-LAST:event_ClientsAddActionPerformed

    private void ClientsUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsUpdateActionPerformed
                // TODO add your handling code here:
        ClientsManager Clients = new ClientsManager();
        DefaultTableModel EditModel = (DefaultTableModel) ClientsTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = CDateofbirth.getDate();

        Clients.setNo(No.getText());
        Clients.setCPassword(CPassword.getText());
        Clients.setName(CName.getText());
        Clients.setCGender(CGender.getSelectedItem().toString());
        Clients.setCDateofbirth(dateFormat.format(selectedDate));
        if (ClientsTable.getSelectedRowCount() == 1) {
            while (No.getText().equals("") || CName.getText().equals("") || CPassword.getText().equals("") || CGender.getSelectedItem().toString().equals("")|| selectedDate == null) {
                JOptionPane.showMessageDialog(null, "Please fill in the required fields");
                return;
            }

            EditModel.setValueAt(Clients.getNo(), ClientsTable.getSelectedRow(), 0);
            EditModel.setValueAt(Clients.getCPassword().toString(), ClientsTable.getSelectedRow(), 1);
            EditModel.setValueAt(Clients.getName(), ClientsTable.getSelectedRow(), 2);
            EditModel.setValueAt(Clients.getCGender(), ClientsTable.getSelectedRow(), 3);
            EditModel.setValueAt(Clients.getCDateofbirth(), ClientsTable.getSelectedRow(), 4);

            //updating in txt file
            BuyingEDeleteMethod(Clients.getNo(), Clients.getCPassword(), Clients.getName(), Clients.getCGender(), Clients.getCDateofbirth());
            BuyingAddMethod(Clients.getNo(), Clients.getCPassword(), Clients.getName(), Clients.getCGender(), Clients.getCDateofbirth());

            JOptionPane.showMessageDialog(this, "Record Updated Successfully");
        } else {
            if (ClientsTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "Table is Empty");
            } else if (ClientsTable.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(null, "No Row is Selected");
            } else {
                JOptionPane.showMessageDialog(null, "Please Select a Single Row to Update");
            }
        }

        No.setText("");
        CPassword.setText("");
        CName.setText("");
        CGender.setSelectedItem("");
        CDateofbirth.setDate(null);
        No.setEditable(true);
    }//GEN-LAST:event_ClientsUpdateActionPerformed

    private void ClientsDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsDeleteActionPerformed
            // TODO add your handling code here:
        ClientsManager Clients = new ClientsManager();
        DefaultTableModel DeleteModel = (DefaultTableModel) ClientsTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = CDateofbirth.getDate();

        Clients.setNo(No.getText());
        Clients.setCPassword(CPassword.getText());
        Clients.setName(SName.getText());
        Clients.setCGender(CGender.getSelectedItem().toString());
        Clients.setCDateofbirth(dateFormat.format(selectedDate));

        if (ClientsTable.getSelectedRowCount() == 1) {
            DeleteModel.removeRow(ClientsTable.getSelectedRow());
            BuyingDeleteMethod(Clients.getNo(), Clients.getCPassword(), Clients.getName(), Clients.getCGender(), Clients.getCDateofbirth());
            JOptionPane.showMessageDialog(this, "Record Successfully Deleted");
        } else if (ClientsTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Table is Empty");
        } else if (ClientsTable.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "No Row is Selected");
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Single Row to Update");
        }

        No.setText("");
        CPassword.setText("");
        CName.setText("");
        CGender.setSelectedItem("");
        CDateofbirth.setDate(null);
        No.setEditable(true);
    }//GEN-LAST:event_ClientsDeleteActionPerformed

    private void ClientsClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientsClearActionPerformed
        // TODO add your handling code here:
        No.setText("");
        CName.setText("");
        CPassword.setText("");
        CGender.setSelectedItem("");
        CDateofbirth.setDate(null);
        No.setEditable(true);
    }//GEN-LAST:event_ClientsClearActionPerformed

    private void ClientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClientsTableMouseClicked
        // TODO add your handling code here:
        ClientsManager Clients = new ClientsManager();
        DefaultTableModel clientModel = (DefaultTableModel) ClientsTable.getModel();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date selectedDate = CDateofbirth.getDate();

        Clients.setNo(clientModel.getValueAt(ClientsTable.getSelectedRow(), 0).toString());
        Clients.setCPassword(clientModel.getValueAt(ClientsTable.getSelectedRow(), 1).toString());
        Clients.setName(clientModel.getValueAt(ClientsTable.getSelectedRow(), 2).toString());
        Clients.setCGender(clientModel.getValueAt(ClientsTable.getSelectedRow(), 3).toString());
        String dateOfBirthStr = clientModel.getValueAt(ClientsTable.getSelectedRow(), 4).toString();

        try {
            Date dateOfBirth = dateFormat.parse(dateOfBirthStr);
            Clients.setCDateofbirth(dateFormat.format(dateOfBirth));
            CDateofbirth.setDate(dateOfBirth);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        No.setText(Clients.getNo());
        CPassword.setText(Clients.getCPassword());
        CName.setText(Clients.getName());
        CGender.setSelectedItem(Clients.getCGender());

        No.setEditable(false);
    }//GEN-LAST:event_ClientsTableMouseClicked

    private void Log3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Log3ActionPerformed
        // TODO add your handling code here:
        Login log = new Login();
        log.setVisible(true);
        dispose();
    }//GEN-LAST:event_Log3ActionPerformed

    //adding the specific text fields on the file 
    private void ProductAddMethod(String id, String name, String price, String qty, String cat) {
        try {
            FileWriter Writer = new FileWriter("table.txt", true);
            Writer.write(id + "/" + name + "/" + price + "/" + qty + "/" + cat);
            Writer.write(System.getProperty("line.separator"));
            Writer.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Data to Txt File(757)");
        }

    }

    private void ProductDeleteMethod(String id, String name, String price, String qty, String cat) {
        String SpecificString = id.trim() + "/" + name.trim() + "/" + price.trim() + "/" + qty.trim() + "/" + cat.trim(), currentString;
        try {
            FileReader fRead = new FileReader("table.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("temp.txt",true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);
            while ((currentString = fReadBuffer.readLine()) != null) {
                if (currentString.equals(SpecificString)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }

            fReadBuffer.close();
            fWriteBuffer.close();
            File originalFile = new File("table.txt");
            File tempFile = new File("temp.txt");
            originalFile.delete();
            tempFile.renameTo(originalFile);
           
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void ProductEDeleteMethod(String id, String name, String price, String qty, String cat) {
        String SpecificString = id.trim() + "/" + name.trim() + "/" + price.trim() + "/" + qty.trim() + "/" + cat.trim(), currentString;
        try {
            FileReader fRead = new FileReader("table.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("temp.txt", true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);

            while ((currentString = fReadBuffer.readLine()) != null) {
                String SpecificId = currentString.substring(0, 5);
                if (SpecificId.equals(id)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }
            fReadBuffer.close();
            fWriteBuffer.close();
            File originalFile = new File("table.txt");
            originalFile.delete();
            File tempFile = new File("temp.txt");
            tempFile.renameTo(originalFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void SellingAddMethod(String ID, String Password, String Name, String Gender, String Dateofbirth, String Telephone) {
        try {
            FileWriter Writer = new FileWriter("Seller.txt", true);
            Writer.write(ID + "/" + Password + "/" + Name + "/" + Gender + "/"+ Dateofbirth+ "/" + Telephone);
            Writer.write(System.getProperty("line.separator"));
            Writer.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Data to Txt File(757)");
        }

    }

    private void SellingDeleteMethod(String Id, String Password, String Name, String Gender, String Dateofbirth ,String Telephone) {
        String SpecificString = Id + "/" + Password + "/" + Name + "/" + Gender+ "/"+ Dateofbirth+ "/" + Telephone, currentString;

        File originalFile = new File("Seller.txt");
        File tempFile = new File("Temp1.txt");
        try {
            FileReader fRead = new FileReader(originalFile);
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter(tempFile,true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);
            while ((currentString = fReadBuffer.readLine()) != null) {
                if ((currentString.equals(SpecificString))) {
                    continue;
                }

                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();

            }
            
            fReadBuffer.close();
            fWriteBuffer.close();
            originalFile.delete();
            tempFile.renameTo(originalFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void SellingEDeleteMethod(String Id, String Password, String Name, String Gender, String Dateofbirth, String Telephone) {
        String SpecificString = Id.trim() + "/" + Password.trim() + "/" + Name.trim() + "/" + Gender.trim()+ "/"+ Dateofbirth.trim()+ "/" + Telephone.trim(), currentString;
        try {
            FileReader fRead = new FileReader("Seller.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("Temp1.txt", true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);

            while ((currentString = fReadBuffer.readLine()) != null) {
                String SpecificId = currentString.substring(0, 5);
                if (SpecificId.equals(Id)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }
            fReadBuffer.close();
            fWriteBuffer.close();
            File originalSellerFile = new File("Seller.txt");
            originalSellerFile.delete();
            File tempSellerFile = new File("Temp1.txt");
            tempSellerFile.renameTo(originalSellerFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }
     private void BuyingAddMethod(String ID, String Password, String Name, String Gender, String Dateofbirth) {
        try {
            FileWriter Writer = new FileWriter("Clients.txt", true);
            Writer.write(ID + "/" + Password + "/" + Name + "/" + Gender + "/"+ Dateofbirth);
            Writer.write(System.getProperty("line.separator"));
            Writer.close();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Error in Adding Data to Txt File(757)");
        }

    }

    private void BuyingDeleteMethod(String No, String Password, String Name, String Gender, String Dateofbirth) {
        String SpecificString = No + "/" + Password + "/" + Name + "/" + Gender+ "/"+ Dateofbirth, currentString;

        File originalFile = new File("Clients.txt");
        File tempFile = new File("Temp1.txt");
        try {
            FileReader fRead = new FileReader(originalFile);
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter(tempFile,true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);
            while ((currentString = fReadBuffer.readLine()) != null) {
                if ((currentString.equals(SpecificString))) {
                    continue;
                }

                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();

            }
            
            fReadBuffer.close();
            fWriteBuffer.close();
            originalFile.delete();
            tempFile.renameTo(originalFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    private void BuyingEDeleteMethod(String No, String Password, String Name, String Gender, String Dateofbirth) {
        String SpecificString = No.trim() + "/" + Password.trim() + "/" + Name.trim() + "/" + Gender.trim()+ "/"+ Dateofbirth.trim(), currentString;
        try {
            FileReader fRead = new FileReader("Clients.txt");
            BufferedReader fReadBuffer = new BufferedReader(fRead);
            FileWriter fWrite = new FileWriter("Temp1.txt", true);
            BufferedWriter fWriteBuffer = new BufferedWriter(fWrite);

            while ((currentString = fReadBuffer.readLine()) != null) {
                String SpecificId = currentString.substring(0, 5);
                if (SpecificId.equals(No)) {
                    continue;
                }
                fWriteBuffer.write(currentString);
                fWriteBuffer.newLine();
            }
            fReadBuffer.close();
            fWriteBuffer.close();
            File originalClientsFile = new File("Clients.txt");
            originalClientsFile.delete();
            File tempClientsFile = new File("Temp1.txt");
            tempClientsFile.renameTo(originalClientsFile);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error in Deleting Data from Txt File(757)");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADD;
    private com.toedter.calendar.JDateChooser CDateofbirth;
    private javax.swing.JComboBox<String> CGender;
    private javax.swing.JButton CLEAR;
    private javax.swing.JTextField CName;
    private javax.swing.JTextField CPassword;
    private javax.swing.JTextField Cat;
    private javax.swing.JButton ClientsAdd;
    private javax.swing.JButton ClientsClear;
    private javax.swing.JButton ClientsDelete;
    private javax.swing.JTable ClientsTable;
    private javax.swing.JButton ClientsUpdate;
    private javax.swing.JButton DELETE;
    private javax.swing.JButton EDIT;
    private javax.swing.JButton Log;
    private javax.swing.JButton Log1;
    private javax.swing.JButton Log3;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField No;
    private javax.swing.JTextField Price;
    private javax.swing.JTextField Product;
    private javax.swing.JTextField Qty;
    private com.toedter.calendar.JDateChooser SDateofbirth;
    private javax.swing.JComboBox<String> SGender;
    private javax.swing.JTextField SID;
    private javax.swing.JTextField SName;
    private javax.swing.JTextField SPassword;
    private javax.swing.JTextField STelephone;
    private javax.swing.JButton SellerAdd;
    private javax.swing.JButton SellerClear;
    private javax.swing.JButton SellerDelete;
    private javax.swing.JTable SellerTable;
    private javax.swing.JButton SellerUpdate;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
